variant: fcos
version: 1.6.0
# Cockpit via Podman Quadlet
# This runs the official cockpit/ws container with access to host system APIs
# so it can manage the host (systemd, journal, network, podman, etc).
storage:
  files:
    # Ensure password auth is allowed for Cockpit login (optional if using other auth)
    - path: /etc/ssh/sshd_config.d/02-enable-passwords.conf
      mode: 0644
      contents:
        inline: |
          PasswordAuthentication yes
    # Podman Quadlet: define the Cockpit container
    - path: /etc/containers/systemd/cockpit.container
      mode: 0644
      contents:
        inline: |
          [Unit]
          Description=Cockpit Web Console (container)
          Wants=network-online.target
          After=network-online.target

          [Container]
          Image=quay.io/cockpit/ws:latest
          # Use host network to avoid port mapping complexity
          Network=host

          # Privileged-like settings (approximate podman --privileged)
          # Run as root inside the container
          User=0
          # Disable SELinux confinement
          SecurityLabelDisable=true
          # Give the container all capabilities
          AddCapability=ALL
          # Unmask all default masked paths
          Unmask=ALL
          # Minimal init inside container to handle signals/reaping
          RunInit=true

          # Log to journal for easier debugging
          LogDriver=journald

          # Allow managing the host via sockets and metadata
          Volume=/run/dbus/system_bus_socket:/run/dbus/system_bus_socket
          Volume=/run/systemd/journal:/run/systemd/journal
          Volume=/etc/machine-id:/etc/machine-id:ro
          Volume=/run/podman/podman.sock:/run/podman/podman.sock
          Volume=/run/udev:/run/udev:ro
          Volume=/sys/fs/cgroup:/sys/fs/cgroup:ro
          Volume=/etc/localtime:/etc/localtime:ro
          Volume=/etc/hostname:/etc/hostname:ro
          # NetworkManager D-Bus (if managing networking)
          Volume=/run/NetworkManager:/run/NetworkManager:ro

          # Auto-update image from registry when available
          AutoUpdate=registry

          [Service]
          # Ensure we pull the newest image when starting
          Pull=true
          # Keep container running and auto-restart
          Restart=always
          # Graceful stop
          TimeoutStopSec=30s

          [Install]
          WantedBy=multi-user.target
# No explicit systemd.units here: Quadlet will synthesize cockpit.service
# from cockpit.container and enable it via the [Install] section above.
